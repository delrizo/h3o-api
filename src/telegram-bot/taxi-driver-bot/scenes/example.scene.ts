import { Injectable } from '@nestjs/common'
import { Scene, SceneEnter, SceneLeave, Command, Action, On, Ctx } from 'nestjs-telegraf'
import { Markup } from 'telegraf'
import type { SceneContext } from 'telegraf/scenes'

@Injectable()
@Scene('EXAMPLE_SCENE')
export class ExampleScene {
    @SceneEnter()
    async onSceneEnter(@Ctx() ctx: SceneContext) {
        await ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω—ã! üé≠\n\n' + '–≠—Ç–∞ —Å—Ü–µ–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å wizard-—Ä–µ–∂–∏–º–æ–º.\n' + '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
            Markup.keyboard(['üö™ –í—ã—Ö–æ–¥']).resize()
        )
    }

    @On('text')
    async onText(@Ctx() ctx: SceneContext) {
        const text = (ctx.message as any).text

        if (text === 'üö™ –í—ã—Ö–æ–¥') {
            await ctx.scene.leave()
            return
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ü–µ–Ω—ã
        ctx.scene.state = { ...ctx.scene.state, name: text }

        await ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${text}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:`)

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        ctx.wizard.next()
    }

    @On('text')
    async onAge(@Ctx() ctx: SceneContext) {
        const text = (ctx.message as any).text
        const age = parseInt(text)

        if (isNaN(age)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞:')
            return
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        ctx.scene.state = { ...ctx.scene.state, age }

        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        const { name } = ctx.scene.state

        await ctx.reply(
            `–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` + `–ò–º—è: ${name}\n` + `–í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç\n\n` + `–°—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`,
            Markup.removeKeyboard()
        )

        await ctx.scene.leave()
    }

    @SceneLeave()
    async onSceneLeave(@Ctx() ctx: SceneContext) {
        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å—Ü–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!', Markup.removeKeyboard())
    }

    @Command('exit')
    async onExitCommand(@Ctx() ctx: SceneContext) {
        await ctx.scene.leave()
    }
}
